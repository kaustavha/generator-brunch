// Generated by CoffeeScript 1.7.1
var BrunchGenerator, chalk, fs, path, util, yeoman, yosay,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require("util");

path = require("path");

yeoman = require("yeoman-generator");

yosay = require("yosay");

chalk = require("chalk");

fs = require('fs');


/*proxy = process.env.http_proxy or process.env.HTTP_PROXY or process.env.https_proxy or process.env.HTTPS_PROXY or null

githubOptions = version: "3.0.0"
if proxy
  proxyUrl = url.parse proxy 
  githubOptions.proxy =
    host: proxyUrl.hostname
    port: proxyUrl.port

GitHubApi = require "github"
github = new GitHubApi githubOptions

githubUserInfo = (name, cb) ->
    github.user.getFrom user: name, (err, res) ->
        if err
            throw new Error(err.message + "\n\nCannot fetch your github profile. Make sure you've typed it correctly.")
        cb JSON.parse(JSON.stringify(res))
        return
    return
 */

BrunchGenerator = (function(_super) {
  __extends(BrunchGenerator, _super);

  function BrunchGenerator() {
    BrunchGenerator.__super__.constructor.apply(this, arguments);
    this.hookFor('brunch:route', {
      args: 'name'
    });
  }

  BrunchGenerator.prototype.init = function() {
    this.pkg = require("../package.json");
    this.on("end", function() {
      if (!this.options["skip-install"]) {
        return this.installDependencies();
      }
    });
    this.ask = (function(_this) {
      return function(prompts, codeBlock) {
        var done, _assign;
        if (prompts == null) {
          prompts = [];
        }
        done = _this.async();
        _assign = function(prompt, props, codeBlock) {
          var propname;
          propname = prompt.name;
          _this[propname] = props[propname];
          if (!_this.allProps) {
            _this.allProps = [];
          }
          _this.allProps.push(propname);
          _this.allProps[propname] = props[propname];
          if (codeBlock) {
            return codeBlock();
          }
        };
        _this.prompt(prompts, function(props) {
          var prompt, _i, _j, _len, _len1, _ref;
          for (_i = 0, _len = prompts.length; _i < _len; _i++) {
            prompt = prompts[_i];
            if (prompt.choices) {
              _ref = prompt.choices;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                prompt = _ref[_j];
                _assign(prompt, props, codeBlock);
              }
            } else {
              _assign(prompt, props, codeBlock);
            }
          }
          return done();
        });
      };
    })(this);
    this.appNameFromDir = (function(_this) {
      return function() {
        _this.appname = path.basename(process.cwd());
        if (_this.appname == null) {
          _this.appname = 'app';
        }
        _this.appname = _this._.camelize(_this._.slugify(_this._.humanize(_this.appname)));
        return _this.appname;
      };
    })(this);
    return this.compile = (function(_this) {
      return function(templates, src, dest) {
        var tpl, _copy, _dest, _i, _len, _results, _src;
        if (dest && !fs.existsSync(dest)) {
          _this.mkdir(dest);
        } else if (!dest) {
          dest = '';
        }
        if (!src) {
          src = '';
        }
        src = src.toString();
        dest = dest.toString();
        _src = function(tpl) {
          return path.join(src, tpl);
        };
        _dest = function(tpl) {
          if (tpl.substring(0, 1) === '_') {
            tpl = tpl.substring(1, tpl.length);
          }
          return path.join(dest, tpl);
        };
        _copy = function(tpl) {
          if (!tpl) {
            tpl = '';
          }
          if (typeof tpl !== 'string') {
            tpl = tpl.toString();
          }
          return _this.template(_src(tpl), _dest(tpl));
        };
        if (typeof templates === 'string') {

          /* if templates is 'all'
              templates = wrench.readdirSyncRecursive src
           */
          if (templates === '*') {
            src = path.join(process.cwd(), src);
            templates = fs.readdirSync(src);
          } else {
            tpl = templates;
            return _copy(tpl);
          }
        }
        if (typeof templates === 'object') {
          _results = [];
          for (_i = 0, _len = templates.length; _i < _len; _i++) {
            tpl = templates[_i];
            _results.push(_copy(tpl));
          }
          return _results;
        }
      };
    })(this);
  };

  BrunchGenerator.prototype.askForInfo = function() {
    var prompts;
    this.log(yosay("Welcome to the marvelous Brunch generator!"));
    prompts = [
      {
        name: 'appName',
        message: 'Pick a name for your app.',
        "default": this.appNameFromDir
      }, {
        name: 'appDescr',
        message: 'Add a description for you app'
      }, {
        name: 'ghUser',
        message: 'Github username?',
        "default": 'someuser'
      }, {
        type: 'confirm',
        name: 'dlnw',
        message: 'Downloades latest node-webkit?',
        "default": true
      }
    ];
    return this.ask(prompts, (function(_this) {
      return function() {
        if (_this.ghUser === 'someuser') {
          return _this.github = false;
        }
      };
    })(this));
  };

  BrunchGenerator.prototype.askForModules = function() {
    var prompts;
    prompts = [
      {
        type: 'checkbox',
        name: 'ngModules',
        message: 'Pick angular modules you want',
        choices: [
          {
            name: 'ngRoute',
            checked: false
          }, {
            name: 'ngAnimate',
            checked: false
          }, {
            name: 'ngResource',
            checked: false
          }, {
            name: 'ngCookies',
            checked: false
          }, {
            name: 'ngTouch',
            checked: false
          }, {
            name: 'ngSanitize',
            checked: false
          }, {
            name: 'ngMock',
            checked: false
          }
        ]
      }
    ];
    return this.ask(prompts);
  };

  BrunchGenerator.prototype.askForUIFramework = function() {
    var prompts;
    prompts = [
      {
        type: 'checkbox',
        name: 'UI',
        message: 'Pick a frontend framework if you want',
        choices: [
          {
            name: 'foundation',
            checked: false
          }, {
            name: 'bootstrap',
            checked: true
          }, {
            name: 'ng-strap',
            checked: false
          }, {
            name: 'ng-ui',
            checked: false
          }, {
            name: 'skeleton',
            checked: false
          }
        ]
      }
    ];
    return this.ask(prompts);
  };

  BrunchGenerator.prototype.brunch = function() {
    this.compile('_config.coffee');
    return this.compile('*', 'scripts', 'scripts');
  };

  BrunchGenerator.prototype.app = function() {
    this.compile(['_package.json', '_bower.json']);
    this.compile(['_index.jade', '_app.coffee'], '', 'app');
    this.copy("_package.json", "package.json");
    return this.copy("_bower.json", "bower.json");
  };

  BrunchGenerator.prototype.example = function() {
    return this.compile('all', 'example', 'app/example');
  };

  BrunchGenerator.prototype.projectfiles = function() {
    this.copy("editorconfig", ".editorconfig");
    return this.copy("jshintrc", ".jshintrc");
  };

  return BrunchGenerator;

})(yeoman.generators.Base);

module.exports = BrunchGenerator;
